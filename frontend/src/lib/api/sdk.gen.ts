// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateCompanyData, CreateCompanyResponses, DeleteCompanyData, DeleteCompanyResponses, DownloadFinancialsData, DownloadFinancialsResponses, GetCompanyData, GetCompanyResponses, IterateCompaniesData, IterateCompaniesResponses, IterateFinancialsData, IterateFinancialsResponses, IterateScreenerData, IterateScreenerResponses, UpdateCompanyData, UpdateCompanyResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Iterate companies
 */
export const iterateCompanies = <ThrowOnError extends boolean = false>(options?: Options<IterateCompaniesData, ThrowOnError>) => {
    return (options?.client ?? client).get<IterateCompaniesResponses, unknown, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/companies',
        ...options
    });
};

/**
 * Create company
 */
export const createCompany = <ThrowOnError extends boolean = false>(options?: Options<CreateCompanyData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCompanyResponses, unknown, ThrowOnError>({
        url: '/companies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete company
 */
export const deleteCompany = <ThrowOnError extends boolean = false>(options?: Options<DeleteCompanyData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCompanyResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get company
 */
export const getCompany = <ThrowOnError extends boolean = false>(options: Options<GetCompanyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCompanyResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options
    });
};

/**
 * Update company
 */
export const updateCompany = <ThrowOnError extends boolean = false>(options: Options<UpdateCompanyData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateCompanyResponses, unknown, ThrowOnError>({
        url: '/companies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download financials
 */
export const downloadFinancials = <ThrowOnError extends boolean = false>(options?: Options<DownloadFinancialsData, ThrowOnError>) => {
    return (options?.client ?? client).get<DownloadFinancialsResponses, unknown, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/financials/download',
        ...options
    });
};

/**
 * Iterate financials
 */
export const iterateFinancials = <ThrowOnError extends boolean = false>(options: Options<IterateFinancialsData, ThrowOnError>) => {
    return (options.client ?? client).get<IterateFinancialsResponses, unknown, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/financials/{id}',
        ...options
    });
};

/**
 * Iterate screener
 */
export const iterateScreener = <ThrowOnError extends boolean = false>(options?: Options<IterateScreenerData, ThrowOnError>) => {
    return (options?.client ?? client).get<IterateScreenerResponses, unknown, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/screener',
        ...options
    });
};
