// This file is auto-generated by @hey-api/openapi-ts

export type Screener = {
    companyId?: string;
    name?: string;
    currency?: string;
    countryCode?: string;
    magicRank?: number;
    sector?: string;
    capital_expenditures?: number;
    cash_and_equivalents?: number;
    cost_of_revenue?: number;
    current_debt?: number;
    ebit?: number;
    equity?: number;
    free_cash_flow?: number;
    gross_operating_profit?: number;
    long_term_debt?: number;
    net_income?: number;
    number_of_shares?: number;
    operating_cash_flow?: number;
    ppe?: number;
    revenue?: number;
    short_term_investments?: number;
    total_assets?: number;
    total_liabilities?: number;
    eps?: number;
    evebit?: number;
    pb?: number;
    pe?: number;
    ps?: number;
    operating_margin?: number;
    net_margin?: number;
    roe?: number;
    roc?: number;
    liabilities_to_equity?: number;
    debt_to_ebit?: number;
    debt_to_assets?: number;
    cash_conversion?: number;
};

export type Company = {
    id?: string;
    name?: string;
    bio?: string;
    symbol?: string;
    isin?: string;
    currency?: IdAndName;
    sector?: IdAndName;
    orderbookId?: string;
    countryCode?: string;
    marketPlaceCode?: string;
};

export type Financials = {
    companyId?: string;
    fiscalYear?: number;
    currency?: string;
    staticData?: FinancialData;
    derivedData?: DerivedFinancialData;
};

export type DerivedFinancialData = {
    eps?: number;
    evebit?: number;
    pb?: number;
    pe?: number;
    ps?: number;
    operating_margin?: number;
    net_margin?: number;
    roe?: number;
    roc?: number;
    liabilities_to_equity?: number;
    debt_to_ebit?: number;
    debt_to_assets?: number;
    cash_conversion?: number;
};

export type IdAndName = {
    id?: string;
    name?: string;
};

export type FinancialData = {
    capital_expenditures?: number;
    cash_and_equivalents?: number;
    cost_of_revenue?: number;
    current_debt?: number;
    ebit?: number;
    equity?: number;
    free_cash_flow?: number;
    gross_operating_profit?: number;
    long_term_debt?: number;
    net_income?: number;
    number_of_shares?: number;
    operating_cash_flow?: number;
    ppe?: number;
    revenue?: number;
    short_term_investments?: number;
    total_assets?: number;
    total_liabilities?: number;
};

export type IterateScreenerData = {
    body?: never;
    path?: never;
    query?: {
        order?: 'asc' | 'desc';
        orderby?: 'name' | 'magicRank' | 'sector' | 'revenue' | 'cost_of_revenue' | 'gross_operating_profit' | 'ebit' | 'net_income' | 'total_assets' | 'total_liabilities' | 'cash_and_equivalents' | 'short_term_investments' | 'long_term_debt' | 'current_debt' | 'equity' | 'operating_cash_flow' | 'capital_expenditures' | 'free_cash_flow' | 'number_of_shares' | 'ppe' | 'eps' | 'pe' | 'evebit' | 'ps' | 'pb';
        limit?: number;
        offset?: number;
        include?: Array<string>;
        search?: string;
        fiscalYear?: number;
        columns?: Array<string>;
        capital_expenditures?: number;
        ebit?: number;
        equity?: number;
        gross_operating_profit?: number;
        net_income?: number;
        operating_cash_flow?: number;
        revenue?: number;
        eps?: number;
        evebit?: number;
        pb?: number;
        pe?: number;
        ps?: number;
        operating_margin?: number;
        net_margin?: number;
        roe?: number;
        roc?: number;
        liabilities_to_equity?: number;
        debt_to_ebit?: number;
        debt_to_assets?: number;
        cash_conversion?: number;
    };
    url: '/screener';
};

export type IterateScreenerResponses = {
    /**
     * List of Screener items
     * List of Screener items
     */
    200: {
        /**
         * Meta data
         */
        meta: {
            total: number;
        };
        items: Array<Screener>;
    };
};

export type IterateScreenerResponse = IterateScreenerResponses[keyof IterateScreenerResponses];

export type IterateCompaniesData = {
    body?: never;
    path?: never;
    query?: {
        order?: 'asc' | 'desc';
        orderBy?: 'name';
        limit?: number;
        offset?: number;
        include?: Array<string>;
        search?: string;
    };
    url: '/companies';
};

export type IterateCompaniesResponses = {
    /**
     * List of Company items
     * List of Company items
     */
    200: {
        /**
         * Meta data
         */
        meta: {
            total: number;
        };
        items: Array<Company>;
    };
};

export type IterateCompaniesResponse = IterateCompaniesResponses[keyof IterateCompaniesResponses];

export type CreateCompanyData = {
    body?: Company;
    path?: never;
    query?: never;
    url: '/companies';
};

export type CreateCompanyResponses = {
    /**
     * Company
     */
    200: Company;
};

export type CreateCompanyResponse = CreateCompanyResponses[keyof CreateCompanyResponses];

export type DeleteCompanyData = {
    body?: unknown;
    path?: never;
    query?: never;
    url: '/companies/{id}';
};

export type DeleteCompanyResponses = {
    /**
     * Company
     */
    200: Company;
};

export type DeleteCompanyResponse = DeleteCompanyResponses[keyof DeleteCompanyResponses];

export type GetCompanyData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type GetCompanyResponses = {
    /**
     * Company
     */
    200: Company;
};

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses];

export type UpdateCompanyData = {
    body?: Company;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type UpdateCompanyResponses = {
    /**
     * Company
     */
    200: Company;
};

export type UpdateCompanyResponse = UpdateCompanyResponses[keyof UpdateCompanyResponses];

export type IterateFinancialsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        order?: 'asc' | 'desc';
        orderBy?: 'name';
        limit?: number;
        offset?: number;
        include?: Array<string>;
        search?: string;
    };
    url: '/financials/{id}';
};

export type IterateFinancialsResponses = {
    /**
     * List of Financials items
     * List of Financials items
     */
    200: {
        /**
         * Meta data
         */
        meta: {
            total: number;
        };
        items: Array<Financials>;
    };
};

export type IterateFinancialsResponse = IterateFinancialsResponses[keyof IterateFinancialsResponses];

export type ClientOptions = {
    baseUrl: 'http://0.0.0.0:3001' | (string & {});
};